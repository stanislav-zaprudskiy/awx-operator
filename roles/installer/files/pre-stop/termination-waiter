#/usr/bin/env bash

PRE_STOP_LOG_ROLE="${PRE_STOP_LOG_ROLE:-waiter}"
source $(dirname "$0")/termination-env

{

log "the hook has started: marker_file=\"%s\", bailout_file=\"%s\", recheck_sleep=\"%d\", report_every=\"%d\"" \
  "$marker_file" \
  "$bailout_file" \
  "$recheck_sleep" \
  "$report_every"

n=0
while ! [[ -f $marker_file ]]; do
  if [[ -f $bailout_file ]]; then
    log "\"%s\" file has been detected, accepting bail out signal and failing the hook script" \
      "$bailout_file"
    exit 1
  fi

  if [[ $(($n % $report_every)) -eq 0 ]]; then
    log "waiting for marker file to be accessible"
  fi
  n=$(($n + 1))
  sleep $recheck_sleep

  if ! [[ -f $heartbeat_file ]] \
    || [[ $(( $(date +%s) - $(stat -c %Y "$heartbeat_file") )) -gt $recheck_sleep ]]; then
    heartbeat_failed_count=$(( $heartbeat_failed_count + 1 ))
    log "WARN: the heartbeat file hasn't been updated %d/%d iterations in a row" \
      "$heartbeat_failed_count" \
      "$heartbeat_failed_threshold"

  else
    heartbeat_failed_count=0
  fi

  if [[ $heartbeat_failed_count -ge $heartbeat_failed_threshold ]]; then
    log "\"%s\" file hasn't been updated during the last %d iterations, assuming the master is not operating and failing the hook script" \
      "$heartbeat_file" \
      $heartbeat_failed_threshold
    touch "$bailout_file"
    exit 1
  fi
done

log "marker file found, exiting to proceed to termination"

} > "$stdout" 2> "$stderr"
